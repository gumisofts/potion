name: Bita CI/CD
# This workflow will build and test your code with every push or pull request
# to the main branch, and deploy to AWS Lambda using Zappa.
# It will also deploy the documentation to GitHub Pages.
# It will run the tests on Python 3.10, 3.11, and 3.12.
# It will also run code quality checks using Black, Flake8, and isort.

on:
  push:
    branches: ["dev-v01"]
    jobs:
      - check_code
      - tests
      - deploy_docs
      - deploy_dev
  push:
    branches: ["main","v01"]
    jobs:
      - check_code
      - tests
      - deploy_docs
      - code_check
      - deploy_production

  pull_request:
    branches: ["main", "dev-v01", "v01"]

env:
  SECRET_KEY: y)tb02r69qx3&qpw(!tgp800x)3l(q+(!fm$yv%gxwy0o_npd7
  PG_DB_NAME: temp_db
  PG_PASSWORD: temp_password
  PG_HOST: localhost
  PG_PORT: 5432
  PG_USER: temp_user
  REDIS_HOST: localhost
  REDIS_PORT: 6379
  EMAIL_HOST: temp
  EMAIL_HOST_USER: temp@gumisofts.com
  EMAIL_PORT: 123
jobs:
  code_check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Linters & Formatters
        run: |
          pip install black flake8 isort
      - name: Format with Black
        run: black --check .
      - name: Lint with Flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Sort Imports
        run: isort --check --diff --profile black .
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code_check
    services:
      pg:
        image: postgres:alpine
        ports:
          - 5432:5432
        volumes:
          - pg_data:/var/lib/postgresql/data
        env:
          POSTGRES_PASSWORD: ${{ env.PG_PASSWORD }}
          POSTGRES_USER: ${{ env.PG_USER }}
          POSTGRES_DB: ${{ env.PG_DB_NAME }}
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Copy Environment Variables and Secrets
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{vars.AWS_S3_REGION_NAME}}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{vars.AWS_STORAGE_BUCKET_NAME}}" >> .env
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run Tests
        run: python manage.py test
  deploy_dev:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python3 -m venv env
          source env/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Copy Environment Variables and Secrets
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "PG_DB_NAME=${{ vars.PG_DB_NAME }}" >> .env
          echo "PG_USER=${{ vars.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
          echo "PG_HOST=${{ vars.PG_HOST }}" >> .env
          echo "PG_PORT=${{ vars.PG_PORT }}" >> .env
          echo "PG_SSL_MODE=${{ vars.PG_SSL_MODE }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
          echo "EMAIL_HOST=${{ vars.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ vars.EMAIL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{vars.AWS_S3_REGION_NAME}}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{vars.AWS_STORAGE_BUCKET_NAME}}" >> .env
          echo "STATIC_URL=${{vars.STATIC_URL}}" >> .env
          echo "ALLOWED_HOSTS=${{vars.ALLOWED_HOSTS}}" >> .env
          echo "CORS_ALLOWED_ORIGINS=${{vars.CORS_ALLOWED_ORIGINS}}" >> .env
      - name: Copy AWS Credentials
        run: |
          cd ~/
          mkdir .aws
          cd .aws
          echo "[potion]" >> credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> credentials
          echo "region = ${{ vars.AWS_S3_REGION_NAME }}" >> credentials

      - name: Deploy with Zappa
        run: |
          source env/bin/activate
          zappa deploy dev || zappa update dev
  deploy_docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy_dev
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Dependencies
        run: pip install -r requirements.txt
        shell: bash
      - name: Create Directory
        run: |
          mkdir schema 
          mkdir schema/build

      - name: Generate Schema File
        run: python manage.py spectacular --color --file schema/index.yaml

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20.11.0"

      - name: Build
        run: npx --yes @redocly/cli@latest build-docs schema/index.yaml --output schema/build/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload build folder repository
          path: "schema/build"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: Development
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python3 -m venv env
          source env/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Copy Environment Variables and Secrets
        run: | 
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "PG_DB_NAME=${{ vars.PG_DB_NAME }}" >> .env
          echo "PG_USER=${{ vars.PG_USER }}" >> .env
          echo "PG_PASSWORD=${{ secrets.PG_PASSWORD }}" >> .env
          echo "PG_HOST=${{ vars.PG_HOST }}" >> .env
          echo "PG_PORT=${{ vars.PG_PORT }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
          echo "EMAIL_HOST=${{ vars.EMAIL_HOST }}" >> .env
          echo "EMAIL_PORT=${{ vars.EMAIL_PORT }}" >> .env
          echo "EMAIL_HOST_USER=${{ vars.EMAIL_HOST_USER }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_DEFAULT_REGION=${{secrets.AWS_S3_REGION_NAME}}" >> .env
          echo "AWS_STORAGE_BUCKET_NAME=${{vars.AWS_STORAGE_BUCKET_NAME}}" >> .env
          echo "STATIC_URL=${{vars.STATIC_URL}}" >> .env
          echo "ALLOWED_HOSTS=${{vars.ALLOWED_HOSTS}}" >> .env
      - name: Copy AWS Credentials
        run: | 
            cd ~/
            mkdir .aws
            cd .aws
            echo "[potion]" >> credentials
            echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> credentials
            echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> credentials
            echo "region = ${{ secrets.AWS_S3_REGION_NAME }}" >> credentials
      
      - name: Deploy with Zappa
        run: |
          source env/bin/activate
          zappa deploy dev || zappa update dev

